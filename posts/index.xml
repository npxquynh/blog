<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog</title>
    <link>http://npxquynh.github.io/blog/posts/</link>
    <description>Recent content in Posts on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Dec 2018 17:33:38 +0100</lastBuildDate>
    
	<atom:link href="http://npxquynh.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bash Ninja | Create Script as String</title>
      <link>http://npxquynh.github.io/blog/posts/bash-ninja-create-script-as-string/</link>
      <pubDate>Tue, 04 Dec 2018 17:33:38 +0100</pubDate>
      
      <guid>http://npxquynh.github.io/blog/posts/bash-ninja-create-script-as-string/</guid>
      <description>There comes a time I need to write a long curl command, interpolated with some variable. And I want to see the whole output of that command, only then I will start to execute it. This is an example of how I do it. And follow by the explanation (mostly for myself) why it work.
Example So we Specific example:
script=&amp;#34;$(cat &amp;lt;&amp;lt;&amp;#39;EOF&amp;#39; API_BASE_PATH=&amp;#34;https://swapi.co/api/&amp;#34; API_ENDPOINT=&amp;#34;starships&amp;#34; for starship in `seq 1 2`; do printf &amp;#34;Starship ${starship}\n&amp;#34; curl -X GET &amp;#34;${API_BASE_PATH}${API_ENDPOINT}/${starship}/&amp;#34; printf &amp;#34;\n&amp;#34; done EOF )&amp;#34; echo &amp;#34;${script}&amp;#34; eval &amp;#34;${script}&amp;#34;  Why does it work that way?</description>
    </item>
    
    <item>
      <title>Parse Json</title>
      <link>http://npxquynh.github.io/blog/posts/parse-json/</link>
      <pubDate>Thu, 26 Jul 2018 15:26:00 +0200</pubDate>
      
      <guid>http://npxquynh.github.io/blog/posts/parse-json/</guid>
      <description>I usually use 2 ways to parse JSON.
Oj Source code
This one can parse Json really fast.
require &amp;#39;oj&amp;#39; sample = &amp;#39;{&amp;#34;greeting&amp;#34;: &amp;#34;hello&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;sunflower&amp;#34;}&amp;#39; Oj.load(sample) # {&amp;#34;greeting&amp;#34;=&amp;gt;&amp;#34;hello&amp;#34;, &amp;#34;name&amp;#34;=&amp;gt;&amp;#34;sunflower&amp;#34;} Oj.load(sample, symbol_keys: true) # {:greeting=&amp;gt;&amp;#34;hello&amp;#34;, :name=&amp;gt;&amp;#34;sunflower&amp;#34;} Oj.load(sample, symbolize_names: true) # {:greeting=&amp;gt;&amp;#34;hello&amp;#34;, :name=&amp;gt;&amp;#34;sunflower&amp;#34;} JSON module from Ruby Stdlib Documentation
require &amp;#39;json&amp;#39; sample = &amp;#39;{&amp;#34;greeting&amp;#34;: &amp;#34;hello&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;sunflower&amp;#34;}&amp;#39; JSON.parse(sample) # {&amp;#34;greeting&amp;#34;=&amp;gt;&amp;#34;hello&amp;#34;, &amp;#34;name&amp;#34;=&amp;gt;&amp;#34;sunflower&amp;#34;} JSON.parse(sample, symbolize_names: true) # {:greeting=&amp;gt;&amp;#34;hello&amp;#34;, :name=&amp;gt;&amp;#34;sunflower&amp;#34;} Benchmark I use the Json Placeholder to get some fake data in Json to measure the performance between Oj.</description>
    </item>
    
    <item>
      <title>Block Proc Lambda</title>
      <link>http://npxquynh.github.io/blog/posts/block-proc-lambda/</link>
      <pubDate>Wed, 11 Jul 2018 23:13:36 +0200</pubDate>
      
      <guid>http://npxquynh.github.io/blog/posts/block-proc-lambda/</guid>
      <description>I was reading the Mastering Ruby blocks in less than 5 minutes and I was confused on the part on how &amp;amp;block means. So I went back to the basic.
Blocks are syntactic structures in Ruby; they are not objects, and cannot be manipulated as objects. It is possible, however, to create an object that represents a block. And that object is call Proc object.
# Block [-1, 0, 1].</description>
    </item>
    
    <item>
      <title>Hugo theme does not work with GitHub Project Pages</title>
      <link>http://npxquynh.github.io/blog/posts/first-post/</link>
      <pubDate>Fri, 29 Jun 2018 01:29:59 +0200</pubDate>
      
      <guid>http://npxquynh.github.io/blog/posts/first-post/</guid>
      <description>;TLDR
Read the document of deployment for GitHub Project Pages again
My setup  Setup a simple site with Hugo with Quick Start tutorial Use Project Pages on GitHub to host this blog at &amp;lt;USERNAME&amp;gt;.github.io/&amp;lt;PROJECT_NAME&amp;gt; . The GitHub page documentation explains the differences between the two. The main reason I chose Project Pages over User Pages is because only master branch can be used for publishing. Follow the Deployment of Project Pages From Your gh-pages branch  Problem The theme doesn&amp;rsquo;t work when I tried it on GitHub</description>
    </item>
    
  </channel>
</rss>